{"version":3,"file":"static/js/720.bff79e18.chunk.js","mappings":"oSAEA,IAEIA,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,QAAS,CAAEG,WAAW,EAAMC,OAAO,IAE5EL,EAAkBM,SAElB,IAAIC,EAAqB,IAAIC,WAE7B,SAASC,IAIL,OAHsC,IAAlCF,EAAmBG,aACnBH,EAAqB,IAAIC,WAAWG,EAAAA,OAAAA,SAEjCJ,CACV,CAED,SAASK,EAAmBC,EAAKC,GAC7B,OAAOd,EAAkBM,OAAOG,IAAkBM,SAASF,EAAKA,EAAMC,GACzE,CAED,IAAIE,EAAkB,EAIlBC,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAIhB,EAAOC,SAAS,QAAQe,YAAcA,aAE3D,SAEnCC,EAAwD,oBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,EAC5C,EACK,SAAUD,EAAKC,GACjB,IAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,OAEpB,EA0CD,IAAIE,EAAqB,IAAIC,WAE7B,SAASC,IAIL,OAHsC,IAAlCF,EAAmBnB,aACnBmB,EAAqB,IAAIC,WAAWnB,EAAAA,OAAAA,SAEjCkB,CACV,CAKM,SAASG,EAAMC,GAClB,IACI,IAAMC,EAASvB,EAAAA,iCAAsC,IAC/CwB,EAvDd,SAA2Bd,EAAKe,EAAQC,GAEpC,GAAoB,kBAAThB,EAAmB,MAAM,IAAIiB,MAAM,8BAE9C,QAAgBC,IAAZF,EAAuB,CACvB,IAAMd,EAAMN,EAAkBO,OAAOH,GAC/BR,EAAMuB,EAAOb,EAAII,QAGvB,OAFAlB,IAAkBM,SAASF,EAAKA,EAAMU,EAAII,QAAQF,IAAIF,GACtDP,EAAkBO,EAAII,OACfd,CACV,CASD,IAPA,IAAIC,EAAMO,EAAIM,OACVd,EAAMuB,EAAOtB,GAEX0B,EAAM/B,IAERgC,EAAS,EAENA,EAAS3B,EAAK2B,IAAU,CAC3B,IAAMC,EAAOrB,EAAIsB,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAI3B,EAAM4B,GAAUC,CACvB,CAED,GAAID,IAAW3B,EAAK,CACD,IAAX2B,IACApB,EAAMA,EAAIuB,MAAMH,IAEpB5B,EAAMwB,EAAQxB,EAAKC,EAAKA,EAAM2B,EAAsB,EAAbpB,EAAIM,QAC3C,IAAML,EAAOb,IAAkBM,SAASF,EAAM4B,EAAQ5B,EAAMC,GACtD+B,EAAM1B,EAAaE,EAAKC,GAC9B,GAAIuB,EAAInB,OAASL,EAAIM,OAAQ,MAAM,IAAIW,MAAM,+BAC7CG,GAAUI,EAAIjB,OACjB,CAGD,OADAZ,EAAkByB,EACX5B,CACV,CAiBoBiC,CAAkBb,EAAMtB,EAAAA,kBAAwBA,EAAAA,oBACvDoC,EAAO/B,EACbL,EAAAA,MAAWuB,EAAQC,EAAMY,GACzB,IAAIC,EAAKjB,IAAkBG,EAAS,EAAI,GACpCe,EAAKlB,IAAkBG,EAAS,EAAI,GACxC,OAAOtB,EAAmBoC,EAAIC,EAIjC,CAXD,QASItC,EAAAA,gCAAqC,IACrCA,EAAAA,gBAAqBqC,EAAIC,EAC5B,CACJ,CAEM,SAASC,EAAiBC,EAAMC,GACnC,MAAM,IAAId,MAAM1B,EAAmBuC,EAAMC,GAC5C,C","sources":["../../hello-wasm/pkg/index_bg.js"],"sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        if (ret.read !== arg.length) throw new Error('failed to pass whole string');\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n* @param {string} name\n* @returns {string}\n*/\nexport function greet(name) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.greet(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8Memory0","Uint8Array","getUint8Memory0","byteLength","wasm","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","cachedInt32Memory0","Int32Array","getInt32Memory0","greet","name","retptr","ptr0","malloc","realloc","Error","undefined","mem","offset","code","charCodeAt","slice","ret","passStringToWasm0","len0","r0","r1","__wbindgen_throw","arg0","arg1"],"sourceRoot":""}